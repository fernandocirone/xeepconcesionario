// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using xeepconcesionario.Data;

#nullable disable

namespace xeepconcesionario.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250904165152_agregoColores")]
    partial class agregoColores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("ApellidoYNombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Barrio")
                        .HasColumnType("text");

                    b.Property<string>("Cargo")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DomicilioLaboral")
                        .HasColumnType("text");

                    b.Property<string>("Empresa")
                        .HasColumnType("text");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp");

                    b.Property<decimal?>("IngresosMensuales")
                        .HasColumnType("numeric");

                    b.Property<int?>("LocalidadId")
                        .HasColumnType("integer");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("text");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("text");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .HasColumnType("text");

                    b.Property<string>("TelefonoCelular")
                        .HasColumnType("text");

                    b.Property<string>("TelefonoFijo")
                        .HasColumnType("text");

                    b.Property<bool?>("TieneTarjetaCredito")
                        .HasColumnType("boolean");

                    b.Property<string>("TipoOcupacion")
                        .HasColumnType("text");

                    b.Property<string>("TipoVivienda")
                        .HasColumnType("text");

                    b.HasKey("ClienteId");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Cobrador", b =>
                {
                    b.Property<int>("CobradorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CobradorId"));

                    b.Property<string>("NombreCobrador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CobradorId");

                    b.ToTable("Cobradores");
                });

            modelBuilder.Entity("Cobro", b =>
                {
                    b.Property<int>("CobroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CobroId"));

                    b.Property<int?>("CobradorId")
                        .HasColumnType("integer");

                    b.Property<int>("CuotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.Property<string>("ObservacionCobro")
                        .HasColumnType("text");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CobroId");

                    b.HasIndex("CobradorId");

                    b.HasIndex("CuotaId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cobros");
                });

            modelBuilder.Entity("CondicionVenta", b =>
                {
                    b.Property<int>("CondicionVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CondicionVentaId"));

                    b.Property<string>("NombreCondicionVenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CondicionVentaId");

                    b.ToTable("CondicionesVenta");
                });

            modelBuilder.Entity("Contrato", b =>
                {
                    b.Property<int>("ContratoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContratoId"));

                    b.Property<string>("DescripcionContrato")
                        .HasColumnType("text");

                    b.Property<string>("NombreContrato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlazoMeses")
                        .HasColumnType("integer");

                    b.HasKey("ContratoId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("Cuota", b =>
                {
                    b.Property<int>("CuotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CuotaId"));

                    b.Property<int>("EstadoCuota")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("MontoCuota")
                        .HasColumnType("numeric");

                    b.Property<int>("Numerocuota")
                        .HasColumnType("integer");

                    b.Property<int>("PlazoMeses")
                        .HasColumnType("integer");

                    b.Property<decimal>("SaldoCuota")
                        .HasColumnType("numeric");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("integer");

                    b.HasKey("CuotaId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Cuotas");
                });

            modelBuilder.Entity("Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("Localidad", b =>
                {
                    b.Property<int>("LocalidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalidadId"));

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreLocalidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("LocalidadId");

                    b.HasIndex("ProvinciaId");

                    b.HasIndex("RegionId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Provincia", b =>
                {
                    b.Property<int>("ProvinciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProvinciaId"));

                    b.Property<string>("NombreProvincia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProvinciaId");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("NombreRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("TipoBaja", b =>
                {
                    b.Property<int>("TipoBajaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipoBajaId"));

                    b.Property<string>("NombreTipoBaja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TipoBajaId");

                    b.ToTable("TiposBaja");
                });

            modelBuilder.Entity("ValorPlan", b =>
                {
                    b.Property<int>("ValorPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ValorPlanId"));

                    b.Property<DateTime>("FechaValor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("ValorPlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("ValoresPlan");
                });

            modelBuilder.Entity("xeepconcesionario.Models.ActividadSolicitud", b =>
                {
                    b.Property<int>("ActividadSolicitudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActividadSolicitudId"));

                    b.Property<int>("EstadoActividadId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActividadSolicitudId");

                    b.HasIndex("EstadoActividadId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ActividadesSolicitud");
                });

            modelBuilder.Entity("xeepconcesionario.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("xeepconcesionario.Models.ApplicationUserTipoUsuario", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TipoUsuarioId");

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("ApplicationUserTiposUsuario");
                });

            modelBuilder.Entity("xeepconcesionario.Models.EstadoActividad", b =>
                {
                    b.Property<int>("EstadoActividadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoActividadId"));

                    b.Property<string>("NombreEstadoActividad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EstadoActividadId");

                    b.ToTable("EstadosActividad");
                });

            modelBuilder.Entity("xeepconcesionario.Models.Solicitud", b =>
                {
                    b.Property<int>("SolicitudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SolicitudId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<int>("CondicionVentaId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContratoId")
                        .HasColumnType("integer");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaCarga")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaSuscripcion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JefeVentasUserId")
                        .HasColumnType("text");

                    b.Property<int>("NumeroSolicitud")
                        .HasColumnType("integer");

                    b.Property<string>("ObservacionSolicitud")
                        .HasColumnType("text");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("SupervisorUserId")
                        .HasColumnType("text");

                    b.Property<int>("TipoBajaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorSellado1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorSellado2")
                        .HasColumnType("numeric");

                    b.Property<string>("VendedorUserId")
                        .HasColumnType("text");

                    b.HasKey("SolicitudId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CondicionVentaId");

                    b.HasIndex("ContratoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("JefeVentasUserId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SupervisorUserId");

                    b.HasIndex("TipoBajaId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VendedorUserId");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("xeepconcesionario.Models.TipoUsuario", b =>
                {
                    b.Property<int>("TipousuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipousuarioId"));

                    b.Property<string>("Nombretipousuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TipousuarioId");

                    b.ToTable("TiposUsuario");

                    b.HasData(
                        new
                        {
                            TipousuarioId = 1,
                            Nombretipousuario = "Vendedor"
                        },
                        new
                        {
                            TipousuarioId = 2,
                            Nombretipousuario = "Supervisor"
                        },
                        new
                        {
                            TipousuarioId = 3,
                            Nombretipousuario = "Jefe de Ventas"
                        });
                });

            modelBuilder.Entity("xeepconcesionario.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanId"));

                    b.Property<decimal>("AdelantoMensual")
                        .HasColumnType("numeric");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CuotaApertura")
                        .HasColumnType("integer");

                    b.Property<decimal>("CuotaIngreso")
                        .HasColumnType("numeric");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Sellado")
                        .HasColumnType("numeric");

                    b.HasKey("PlanId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.HasOne("Localidad", "Localidad")
                        .WithMany("Clientes")
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Localidad");
                });

            modelBuilder.Entity("Cobro", b =>
                {
                    b.HasOne("Cobrador", "Cobrador")
                        .WithMany("Cobros")
                        .HasForeignKey("CobradorId");

                    b.HasOne("Cuota", "Cuota")
                        .WithMany("Cobros")
                        .HasForeignKey("CuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.Solicitud", "Solicitud")
                        .WithMany("Cobros")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cobrador");

                    b.Navigation("Cuota");

                    b.Navigation("Solicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Cuota", b =>
                {
                    b.HasOne("xeepconcesionario.Models.Solicitud", "Solicitud")
                        .WithMany("Cuotas")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Localidad", b =>
                {
                    b.HasOne("Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Region", "Region")
                        .WithMany("Localidades")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provincia");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("xeepconcesionario.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("xeepconcesionario.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("xeepconcesionario.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValorPlan", b =>
                {
                    b.HasOne("xeepconcesionario.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("xeepconcesionario.Models.ActividadSolicitud", b =>
                {
                    b.HasOne("xeepconcesionario.Models.EstadoActividad", "EstadoActividad")
                        .WithMany("Actividades")
                        .HasForeignKey("EstadoActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.Solicitud", "Solicitud")
                        .WithMany("Actividades")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoActividad");

                    b.Navigation("Solicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("xeepconcesionario.Models.ApplicationUserTipoUsuario", b =>
                {
                    b.HasOne("xeepconcesionario.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "User")
                        .WithMany("TiposUsuario")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUsuario");

                    b.Navigation("User");
                });

            modelBuilder.Entity("xeepconcesionario.Models.Solicitud", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Solicitudes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondicionVenta", "CondicionVenta")
                        .WithMany("Solicitudes")
                        .HasForeignKey("CondicionVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contrato", null)
                        .WithMany("Solicitudes")
                        .HasForeignKey("ContratoId");

                    b.HasOne("Estado", "Estado")
                        .WithMany("Solicitudes")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "JefeVentas")
                        .WithMany()
                        .HasForeignKey("JefeVentasUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("xeepconcesionario.Plan", "Plan")
                        .WithMany("Solicitudes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TipoBaja", "TipoBaja")
                        .WithMany("Solicitudes")
                        .HasForeignKey("TipoBajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xeepconcesionario.Models.ApplicationUser", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cliente");

                    b.Navigation("CondicionVenta");

                    b.Navigation("Estado");

                    b.Navigation("JefeVentas");

                    b.Navigation("Plan");

                    b.Navigation("Supervisor");

                    b.Navigation("TipoBaja");

                    b.Navigation("Usuario");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Cobrador", b =>
                {
                    b.Navigation("Cobros");
                });

            modelBuilder.Entity("CondicionVenta", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Contrato", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Cuota", b =>
                {
                    b.Navigation("Cobros");
                });

            modelBuilder.Entity("Estado", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Localidad", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Provincia", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("Region", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("TipoBaja", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("xeepconcesionario.Models.ApplicationUser", b =>
                {
                    b.Navigation("TiposUsuario");
                });

            modelBuilder.Entity("xeepconcesionario.Models.EstadoActividad", b =>
                {
                    b.Navigation("Actividades");
                });

            modelBuilder.Entity("xeepconcesionario.Models.Solicitud", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("Cobros");

                    b.Navigation("Cuotas");
                });

            modelBuilder.Entity("xeepconcesionario.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("xeepconcesionario.Plan", b =>
                {
                    b.Navigation("Solicitudes");
                });
#pragma warning restore 612, 618
        }
    }
}
